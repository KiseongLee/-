'''
이 문제는 요구사항대로 충실히 구현하면 되는 문제입니다.
일련의 명령에 따라서 개체를 차례대로 이동시킨다는 점에서 시뮬레이션(Simulation) 유형으로도 분류되며
구현이 중요한 대표적인 문제 유형입니다.
  다만, 알고리즘 교재나 문제 풀이 사이트에 따라서 다르게 일컬을 수 있으므로, 코딩 테스트에서의 
  시뮬레이션 유형, 구현 유형, 완전 탐색 유형은 서로 유사한 점이 많다는 정도로만 기억합시다.'''


n = int(input())
plans = input().split()
x, y = 1, 1 


dx = [0, 0, -1, 1]  # 방향에 대한 좌표를 설정함
dy = [-1, 1, 0, 0]  # 밑에 식이 간단해질 수 있음
move_types = ['L','R','U','D'] # type을 정의해두고, 값을 하나씩 대입하므로 밑에 식이 간단해질 수 있음

'''
구현해야할 것
1. 계획서의 각 방향을 입력받아 더해주는 것
2. 무시해야할 것들 처리 
'''
for plan in plans:

    for i in range(len(move_types)): 
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]
    # 계획서의 각 방향을 입력 받아 더해주는 것, 앞의 정의된 내용을 가지고 구현했기 때문에 반복문이 더 간결하게 작성되어질 수 있음.
    if nx < 1 or ny < 1 or nx > n or ny >n:
        continue
    # 무시해야할 것들을 처리할 때, 한 꺼번에 처리함으로써 간결하게 작성가능.
    
    x, y = nx, ny  # 변경값 출력하기 전에 대입해줌, 무시해야할 값들은 continue 때문에 다시 반복문으로 진행, 따라서 없었던 작업이 됨.

print(x,y) #출력
